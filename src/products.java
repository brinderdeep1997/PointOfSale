
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.sql.ResultSet;
import java.util.*;
import java.util.logging.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.*;
import pack.DBLoader;

public class products extends javax.swing.JFrame {

    File file;
    ArrayList<tabledata> alitem1 = new ArrayList<>();
    MyTableModel tm = new MyTableModel();

    public products() {
        initComponents();
        setSize(1400, 900);
        setTitle("Manage Products");
        getContentPane().setBackground(new java.awt.Color(204, 204, 255));
        getcategories();
        jTable1.setModel(tm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfpname = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tfdes = new javax.swing.JTextArea();
        tfprice = new javax.swing.JTextField();
        tfbarcode = new javax.swing.JTextField();
        lbpreview = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Products");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 30, 490, 60);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setText("Category");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 130, 170, 40);

        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(240, 130, 280, 40);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Product Name");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(20, 190, 170, 40);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setText("Description");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(20, 250, 150, 40);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setText("Price");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 320, 150, 40);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setText("Barcode");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(20, 370, 150, 40);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setText("Photo");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(20, 440, 150, 40);
        getContentPane().add(tfpname);
        tfpname.setBounds(240, 190, 280, 40);

        tfdes.setColumns(20);
        tfdes.setRows(5);
        jScrollPane1.setViewportView(tfdes);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(240, 240, 280, 70);
        getContentPane().add(tfprice);
        tfprice.setBounds(240, 320, 280, 40);
        getContentPane().add(tfbarcode);
        tfbarcode.setBounds(240, 370, 280, 40);

        lbpreview.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(lbpreview);
        lbpreview.setBounds(240, 430, 150, 130);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(400, 469, 120, 40);

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(130, 600, 140, 40);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(680, 210, 610, 370);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Already added Products");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(680, 20, 600, 90);
        getContentPane().add(jComboBox2);
        jComboBox2.setBounds(690, 120, 390, 50);

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton3.setText("View");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(1100, 119, 190, 50);

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton4.setText("Edit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(790, 619, 160, 50);

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton5.setText("Delete");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(1060, 620, 160, 50);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser jfc = new JFileChooser("C:\\");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpeg", "jpg", "bmp", "png", "jfif");
        jfc.setFileFilter(filter);
        jfc.setAcceptAllFileFilterUsed(false);
        int returnVal = jfc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = jfc.getSelectedFile();
            try {
                BufferedImage img = ImageIO.read(file);
                //Image newimg = img.getScaledInstance(lbpreview.getWidth(), lbpreview.getHeight(), Image.SCALE_SMOOTH);
                BufferedImage newimg = resizephoto(img, lbpreview.getWidth(), lbpreview.getHeight());
//                lbfilename.setText(file.getName());
                lbpreview.setIcon(new ImageIcon(newimg));
            } catch (Exception ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            String catname = (String) jComboBox1.getSelectedItem();
            String pname = tfpname.getText();
            String des = tfdes.getText();
            String price = tfprice.getText();
            String barcode = tfbarcode.getText();
            ResultSet rs = DBLoader.executeStatement("select * from products");
            String newfilename = new Date().getTime() + ".jpg";
            new savefileinfolder(file, newfilename);
            rs.next();
            rs.moveToInsertRow();
            rs.updateString("pname", pname);
            rs.updateString("description", des);
            rs.updateString("barcode", barcode);
            rs.updateString("price", price);
            rs.updateString("category", catname);
            rs.updateString("photo", "src/uploaded_pics/" + newfilename);
            rs.insertRow();
            JOptionPane.showMessageDialog(this, "Product added");

        } catch (Exception ex) {
            Logger.getLogger(products.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (jTable1.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "please select a row to delete");
        } else {

            int ans = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete row??");
            if (ans == JOptionPane.YES_OPTION) {
                try {
                    String pid = alitem1.get(jTable1.getSelectedRow()).pid;
                    ResultSet rs = DBLoader.executeStatement("select * from products where pid='" + pid + "'");
                    if (rs.next()) {
                        rs.deleteRow();
                    }
                    JOptionPane.showMessageDialog(this, "product deleted");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        gettabledata();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (jTable1.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "please select a row to delete");
        } else {
            String pid = alitem1.get(jTable1.getSelectedRow()).pid;
            String pname = alitem1.get(jTable1.getSelectedRow()).pname;
            String cat = alitem1.get(jTable1.getSelectedRow()).category;
            String barcode = alitem1.get(jTable1.getSelectedRow()).barcode;
            String price = alitem1.get(jTable1.getSelectedRow()).price;
            String photo = alitem1.get(jTable1.getSelectedRow()).path;
            String des = alitem1.get(jTable1.getSelectedRow()).description;

            new editproductdata(pid, pname, cat, des, barcode, price, photo).setVisible(true);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new products().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbpreview;
    private javax.swing.JTextField tfbarcode;
    private javax.swing.JTextArea tfdes;
    private javax.swing.JTextField tfpname;
    private javax.swing.JTextField tfprice;
    // End of variables declaration//GEN-END:variables
 BufferedImage resizephoto(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }

    private void getcategories() {
        try {
            ResultSet rs = DBLoader.executeStatement("select * from categories");
            while (rs.next()) {
                String catname = rs.getString("catname");
                jComboBox1.addItem(catname);
                jComboBox2.addItem(catname);
            }

        } catch (Exception ex) {
            Logger.getLogger(products.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void gettabledata() {
        String ans = "";
        try {
            String catname = (String) jComboBox2.getSelectedItem();
            ResultSet rs = DBLoader.executeStatement("select * from products where category='" + catname + "'");
            while (rs.next()) {
                String pid = rs.getString("pid");
                String pname = rs.getString("pname");
                String des = rs.getString("description");
                String cat = rs.getString("category");
                String price = rs.getString("price");
                String barcode = rs.getString("barcode");
                String photo = rs.getString("photo");
                ans += pid + "~~" + pname + "~~" + des + "~~" + cat + "~~" + price + "~~" + barcode + "~~" + photo + ";;";
            }
            System.out.println(ans);
            StringTokenizer st = new StringTokenizer(ans, ";;");
            alitem1.clear();
            while (st.hasMoreTokens()) {
                String row = st.nextToken();
                System.out.println(row);
                StringTokenizer col = new StringTokenizer(row, "~~");
                String pid = col.nextToken();
                String pname = col.nextToken();
                String des = col.nextToken();
                String cat = col.nextToken();
                String price = col.nextToken();
                String barcode = col.nextToken();
                String photo = col.nextToken();
                System.out.println("pid:" + pid);
                System.out.println("pname:" + pname);
                System.out.println("des:" + des);
                System.out.println("cat:" + cat);
                System.out.println("price:" + price);
                System.out.println("barcode:" + barcode);
                System.out.println("photo:" + photo);

                alitem1.add(new tabledata(pid, pname, des, barcode, price, cat, photo));

            }
            jTable1.getColumnModel().getColumn(6).setCellRenderer(new ImageRenderer());
            jTable1.setRowHeight(100);
            tm.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    class ImageRenderer extends DefaultTableCellRenderer {

        JLabel lbl = new JLabel();

        ImageIcon icon = new ImageIcon("");
        BufferedImage bufferedImage, newimage;

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
//            try {
//                URL url = new URL( alitem1.get(row).path);
//                System.out.println("url : " + url);
//                bufferedImage = ImageIO.read(url);
//                newimage = resizephoto(alitem1.get(row).path, 100, 100);
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
            icon = new ImageIcon(alitem1.get(row).path);
            Image im = icon.getImage();
            Image newimg = im.getScaledInstance(80, 70, Image.SCALE_SMOOTH);

            lbl.setIcon(new ImageIcon(newimg));
//            lbl.setBounds(0, 0, 100, 100);
            return lbl;
        }
    }

    private static class tabledata {

        String pid;
        String pname;
        String description;
        String barcode;
        String price;
        String category;
        String path;

        public tabledata(String pid, String pname, String description, String barcode, String price, String category, String path) {
            this.pid = pid;
            this.pname = pname;
            this.description = description;
            this.barcode = barcode;
            this.price = price;
            this.category = category;
            this.path = path;
        }
    }

    class MyTableModel extends AbstractTableModel {

        String colname[];

        MyTableModel() {
            this.colname = new String[]{"pid", "product Name", "Description", "Category", "barcode", "Price", "Photo"};
        }

        @Override
        public int getColumnCount() {
            return colname.length;
        }

        @Override
        public int getRowCount() {
            return alitem1.size();
        }

        @Override
        public String getColumnName(int col) {
            return colname[col];
        }

        @Override
        public Object getValueAt(int i, int j) {
            switch (j) {
                case 0:
                    return alitem1.get(i).pid;
                case 1:
                    return alitem1.get(i).pname;
                case 2:
                    return alitem1.get(i).description;
                case 3:
                    return alitem1.get(i).category;
                case 4:
                    return alitem1.get(i).barcode;
                case 5:
                    return alitem1.get(i).price;
                case 6:
                    return alitem1.get(i).path;
                default:
                    return null;
            }
        }
    }
}
